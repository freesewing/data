<?php

namespace App\Tests;

use \Slim\Container;

class UserTest extends \PHPUnit\Framework\TestCase
{

    private function bootstrap()
    {

        // Instantiate the app
        $settings = require __DIR__ . '/../../../src/settings.php';
        $app = new \Slim\App($settings);
        $container = $app->getContainer();

        // database
        $container['db'] = function ($c) {
            $db = $c['settings']['testdb'];
            $pdo = new \PDO("mysql:host=" . $db['host'] . ";dbname=" . $db['database'],
            $db['user'], $db['password']);
            $pdo->setAttribute(\PDO::ATTR_ERRMODE, \PDO::ERRMODE_EXCEPTION);
            $pdo->setAttribute(\PDO::ATTR_DEFAULT_FETCH_MODE, \PDO::FETCH_OBJ);
            return $pdo;
        };

        return $app;
    }


    /** 
     * Tests constructor
     */
    public function testConstructor()
    {
        $app = $this->bootstrap();

        $obj = new \App\Data\User($app->getContainer());
        $json = new \App\Data\JsonStore();

        $this->assertEquals($obj->getData(),$json);
    }
    /** 
     * Tests basic object creation
     */
    public function estCommentProperties()
    {
        $app = $this->bootstrap();

        $obj = new \App\Data\Comment($app->getContainer());
        $obj->setUser(3);
        $obj->setComment("This is a **test** comment");
        $obj->setPage('/unit/test');
        $obj->setParent(2);
        $obj->setStatusActive();

        $this->assertEquals($obj->getUser(),3);
        $this->assertEquals($obj->getComment(),"This is a **test** comment");
        $this->assertEquals($obj->getPage(),'/unit/test');
        $this->assertEquals($obj->getStatus(),'active');
        
        $obj->setStatusRemoved();
        $this->assertEquals($obj->getStatus(),'removed');
        $obj->setStatusRestricted();
        $this->assertEquals($obj->getStatus(),'restricted');
    }

    /** 
     * Tests basic object creation
     */
    public function estSaveComment()
    {
        $app = $this->bootstrap();

        $obj = new \App\Data\Comment($app->getContainer());
        $obj->setComment("This is a **test** comment");
        $obj->setPage('/unit/test');
        $obj->setParent(2);
        $obj->setStatusActive();

        $user = new \App\Data\User($app->getContainer());
        $obj->create($user);

        $this->assertEquals($obj->getUser(),3);
        $this->assertEquals($obj->getComment(),"This is a **test** comment");
        $this->assertEquals($obj->getPage(),'/unit/test');
        $this->assertEquals($obj->getStatus(),'active');
        
    }

}
